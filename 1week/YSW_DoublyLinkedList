자료는 공유드리겠습니다. 

#include <iostream>
#include <string>
 
using namespace std;
 
class Node
{
public:
    string data; // 데이터 필드
    Node* NextLink; // 다음 노드를 가리키는 포인터
    Node* PrevLink; // 이전 노드를 가리키는 포인터
};
 
class DLL
{
public:
    Node* Head; // 리스트의 머리 부분, 처음 부분
    Node* Tail; // 리스트의 꼬리 부분, 마지막 부분
 
    DLL()
    {
        Head = NULL; // 헤드(Head)의 초기화
        Tail = NULL; // 테일(Tail)의 초기화
    }
 
    void appendNode(string data)
    {
        Node* newNode = new Node(); // 새로운 노드를 생성한다.
 
        newNode->data = data; // 이 노드의 데이터에 집어넣으려는 데이터로 초기화 시킨다.
        newNode->NextLink = NULL; // 다음 노드를 이어주는 링크를 NULL로 초기화 시킨다.
        newNode->PrevLink = NULL; // 이전 노드를 이어주는 링크를 NULL로 초기화 시킨다.
 
        if (Head != NULL) { // 노드를 처음 추가하는 것이 아니라면
            Tail->NextLink = newNode; // 꼬리 노드의 다음 노드를 새로 추가된 노드로 지정한다
            newNode->PrevLink = Tail; // 새로 추가된 노드의 이전 노드를 꼬리 노드로 지정한다
            Tail = newNode; // 꼬리 노드를 새로 추가된 노드로 지정한다
        }
        else { // 노드를 처음 추가하는 것이라면
            Head = Tail = newNode; // 새로 추가한 노드를 헤드로 지정한다
        }
    }
 
    void deleteNode(string data)
    {
        Node* pNode = Head; // 임시 포인터에 헤드의 주소 값으로 초기화 한다
 
        if (pNode == NULL) return; // 한번도 추가하지 않았다면 그냥 빠져나온다
        else { // 노드가 하나만 존재하는 것이 아니라면
            Node* prevNode; // 이전 노드를 담을 Node 클래스 포인터
            Node* nextNode; // 다음 노드를 담을 Node 클래스 포인터
 
            do {
                // data와 pNode->data와 비교하여 일치하면 반복문을 빠져 나온다
                if (data.compare(pNode->data) == 0) break;
                pNode = pNode->NextLink; // 임시 노드에 다음 노드의 주소값을 대입한다.
            } while (pNode != NULL); // 임시 포인터의 주소값이 NULL이 될때까지 반복
 
            prevNode = pNode->PrevLink; // 삭제하려는 노드의 이전 노드를 가리킨다
            nextNode = pNode->NextLink; // 삭제하려는 노드의 다음 노드를 가리킨다
 
            // 삭제하려는 노드의 이전 노드가 없으면 헤드(Head) 노드이므로 삭제하려는 노드의 다음 노드를 헤드 노드로 지정
            if (prevNode == NULL) Head = nextNode;
            // 위의 경우가 아니라면 삭제하려는 노드의 이전 노드가 삭제하려는 노드의 다음 노드를 가리키게 한다
            else prevNode->NextLink = nextNode;
 
            // 삭제하려는 노드의 다음 노드가 없으면 테일(Tail) 노드이므로 삭제하려는 노드의 이전 노드를 테일 노드로 지정
            if (nextNode == NULL) Tail = prevNode;
            // 위의 경우가 아니라면 삭제하려는 노드의 다음 노드가 삭제하려는 노드의 이전 노드를 가리키게 한다
            else nextNode->PrevLink = prevNode;
 
            delete pNode; // pNode를 메모리 공간에서 해제시킨다
        }
    }
 
    void printNode() {
        Node* tempPoint = Head; // 임시 포인터를 생성하고 이 포인터에 헤드의 주소 값을 대입
 
        // 노드가 하나도 존재하지 않으면 함수를 빠져나옴
        if (tempPoint == NULL) { cout << "리스트가 비어 있습니다." << endl; return; }
        // 노드가 하나만 존재할 경우
        if (tempPoint->NextLink == NULL) { cout << tempPoint->data << "->" << "NULL" << endl; }
        // 노드가 하나가 아닌 하나 이상 존재할 경우
        else {
            while (tempPoint != NULL) // 임시 포인터가 NULL이 될때까지 반복
            {
                cout << tempPoint->data << "<->"; // 임시 포인터의 데이터를 출력한다
                tempPoint = tempPoint->NextLink; // 임시 포인터의 NextlINK의 값을 대입한다
            }
 
            cout << "NULL" << endl; // 마지막에는 노드가 없음을 나타내기 위해 NULL 표시/개행
        }
    }
};
 
int main()
{
    DLL List;
 
    List.appendNode("빨강");
    List.appendNode("주황");
    List.appendNode("노랑");
    List.printNode();
 
    List.deleteNode("주황");
    List.printNode();
 
    return 0;
}

